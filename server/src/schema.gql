# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type TournamentAdminModel {
  id: Int!
  tournament: TournamentModel!
  user: UserModel!
}

type UserModel {
  id: Int!
  name: String!
  seat: String!
  isGlobalAdmin: Boolean!
  tournaments: [TournamentParticipantModel!]!
  teams: [TeamMemberModel!]!
  adminTournaments: [TournamentAdminModel!]!
}

type TeamMemberModel {
  team: TeamModel!
  user: UserModel!
  isTeamCaptain: Boolean!
}

type TeamModel {
  id: Int!
  name: String!
  tag: String!
  members: [TeamMemberModel!]!
  tournaments: [TournamentParticipantModel!]!
}

type TournamentParticipantModel {
  tournament: TournamentModel!
  user: UserModel
  team: TeamModel
  initialSeed: Int
  finalRank: Int
}

type EventModel {
  id: Int!
  name: String!
  tournaments: [TournamentModel!]!
}

type TournamentModel {
  """Unique identifier of the tournament."""
  id: Int!
  event: EventModel!

  """Name of the tournament."""
  name: String!

  """Flag indicating whether the tournament is publicly displayed."""
  isPublished: Boolean!

  """Tournament rules."""
  rules: String

  """
  Tournaments are grouped by this category when displayed in the tournament overview.
  """
  category: String

  """
  Users can only participate in one tournament within the same registration group.
  """
  registrationGroup: String

  """Prize for the first place."""
  prize1: String

  """Prize for the second place."""
  prize2: String

  """Prize for the third place."""
  prize3: String

  """Date and time of the tournament briefing."""
  briefingTime: DateTime

  """Number of players per team (1 means solo tournaments)."""
  numPlayersPerTeam: Int!

  """
  Minimum number of participants required for the tournament to take place.
  """
  minParticipants: Int

  """
  Maximum number of participants that can register for the tournament (0 means there is no upper limit).
  """
  maxParticipants: Int

  """List of participants registered for this tournament."""
  participants: [TournamentParticipantModel!]!
  admins: [TournamentAdminModel!]!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type RegisterTeamOutput {
  success: Boolean!
  team: TeamModel
  message: String
}

type Query {
  tournaments(publishedOnly: Boolean = true, eventId: Int): [TournamentModel!]!
  tournament(id: Int!): TournamentModel
  users: [UserModel!]!
  user(id: Int!): UserModel!
  events: [EventModel!]!
  event(id: Int!): EventModel
  teams: [TeamModel!]!
  team(id: Int!): TeamModel!
}

type Mutation {
  createTournament(data: CreateTournamentInput!): TournamentModel!
  updateTournament(id: Int!, data: UpdateTournamentInput!): TournamentModel!
  deleteTournament(id: Int!): Boolean!
  registerUserParticipant(tournamentId: Int!, userId: Int!): TournamentParticipantModel!
  deregisterUserParticipant(tournamentId: Int!, userId: Int!): Boolean!
  addTournamentAdmin(tournamentId: Int!, userId: Int!): TournamentAdminModel!
  removeTournamentAdmin(tournamentId: Int!, userId: Int!): Boolean!
  createUser(data: CreateUserInput!): UserModel!
  updateUser(id: Int!, data: UpdateUserInput!): UserModel!
  deleteUser(id: Int!): Boolean!
  createEvent(data: CreateEventInput!): EventModel!
  updateEvent(id: Int!, data: UpdateEventInput!): EventModel!
  deleteEvent(id: Int!): Boolean!
  registerTeam(data: RegisterTeamInput!): RegisterTeamOutput!
  updateTeam(id: Int!, data: UpdateTeamInput!): TeamModel!
  deregisterTeam(id: Int!): Boolean!
}

input CreateTournamentInput {
  name: String!
  eventId: Int!
}

input UpdateTournamentInput {
  name: String
  isPublished: Boolean
  rules: String
  category: String
  registrationGroup: String
  prize1: String
  prize2: String
  prize3: String
  briefingTime: DateTime
  numPlayersPerTeam: Int
  minParticipants: Int
  maxParticipants: Int
}

input CreateUserInput {
  name: String!
  seat: String!
  isGlobalAdmin: Boolean! = false
}

input UpdateUserInput {
  name: String
  seat: String
  isGlobalAdmin: Boolean
}

input CreateEventInput {
  name: String!
}

input UpdateEventInput {
  name: String
  seat: String
  isGlobalAdmin: Boolean
}

input RegisterTeamInput {
  name: String!
  tag: String!
  userId: Int!
  tournamentId: Int!
}

input UpdateTeamInput {
  name: String
  tag: String
}